

JCL（Jakarta Commons Logging）是如何实现的、原理是什么？好处是什么？
    - 基于门面模式，定义了接口交互标准，解耦了具体实现，可以更容易更换日志框架
    - 可与基于日志标准，统一不同系统的日志输出

SLF4J（Simple Logging Facade）和JCL有什么异同？为什么会诞生？
    - 区别：JCL动态绑定，系统庞大时容易失败；SLF4J采用了静态绑定（未验证）
    - 相同：都是日志API而不负责实现

动态绑定和静态绑定都是如何实现的？
    - （未确认）动态绑定模式中，是通过实时扫描LoggerFactory等类的实现，来找到打印器的（但这样解释不了jcl-over-slf4j.jar的存在）
    - 静态绑定模式中，适配器有个类StaticLoggerBinder，实现了LoggerFactoryBinder接口；适配器类型就决定了打印器类型

谁决定了使用的是JCL还是SLF4J？除了代码中显式编写，是否还有默认输出的绑定？
    -

SLF4J的所有适配器，是如何实现引入jar包即完成绑定的？ 是否依赖jdk的哪些装载机制，比如类加载的替换等？
    - (未确定)

Log4j2比Logback快，主要是因为前者使用了新的并发框架disruptor，后者是使用ArrayBlockingQueue控制并发；但其提升的原理是什么？
    - disruptor是采用数据结构避免了线程锁控制

日志级别中有trace、debug、info、warn、error，trace是什么意思？
    - （只是一个级别？）


